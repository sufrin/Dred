<?xml version="1.0" encoding="iso-8859-1"?>

<!-- ===========================================================================================
        
This builds an Apple Application bundle from the Dred.jar file and local code designed to
provide an interface between OS X and the core of Dred.

============================================================================================ -->

<project name="AppleDred" default="app" basedir=".">

  <property name="buildnumber" value="August 2006"/>
  <property name="copyright"   value="Copyright &#xa9; 2006 Bernard Sufrin, Oxford University"/>
  <propertyfile  file   ="appledred.properties"
                 comment="Build details for the About menu entry">
     <entry key="builddate" type="date" value="now" pattern="dd MMM yyyy, HH:mm"/>
  </propertyfile>
  <property file="appledred.properties"/>
  <property file="../dredrevision.properties"/>
  <property name="appbundler.jar" value="./appbundler-1.0.jar"/>
  <property name="version" value="SVN Revision ${subversion.revision} (${builddate})"/>
  
  <!-- The main class to be invoked by the Apple Application launcher.
       This need not be the same as the main class to be invoked from a java -jar command.
  -->
  <property name="mainclass"   value="org.sufrin.dred.AppleDred"/>
  
  
   
  <target name="compile" description="Compile the classes" depends="prepare">
    <depend srcdir ="." destdir= "classes"
                        cache=   "build"
                        closure= "true"/>
                        
    <javac srcdir="."  extdirs = "build" destdir="classes" source="1.5">
               <compilerarg line="-XDignore.symbol.file -Xlint:unchecked -Xlint:deprecation"/>
               <include name="**/*.java"/>
    </javac>
               
  </target>

  <target       name        = "webdist" 
                description = "Copy AppleDred.app to jape: website using scp"
                depends     = "newapp">
                <exec executable = "sh" >
                      <arg line="makedmg ${ant.project.name}"/>
                </exec>
                <exec executable="sh" output="/dev/tty" error="/dev/tty">
                  <arg line="-c 'rsync -v -t -e ssh ${ant.project.name}.dmg sufrin@linux.cs.ox.ac.uk:=WEBSITES/personal/jape.org/DRED'"/>
                </exec>
  </target>

  <target name="jar" depends="compile" description="Create JAR file">    
    <jar jarfile="build/${ant.project.name}.jar" 
         basedir="classes"
         update="yes"
         includes = "**/*.class **/*.bindings">
         <manifest>
             <attribute name="Main-Class" value="org.sufrin.dred.Dred"/>
         </manifest>         
    </jar>
  </target>


  
  <target name="app" depends="jar" description="Build the application (for older jvm)">

    <taskdef name=      "jarbundler"
             classpath= "${jarbundler.jar}" 
             classname= "net.sourceforge.jarbundler.JarBundler"/>

    <jarbundler dir=            "${basedir}" 
                verbose=        "true"
                name=           "${ant.project.name}"
                mainclass=      "${mainclass}"
                jar=            "build/${ant.project.name}.jar"
                jvmversion=     "1.5+"
                shortname=      "${ant.project.name}"
                icon=           "${ant.project.name}.icns"
                infostring=     "${ant.project.name} ${builddate} ${copyright}"
                version=        "${version}"
                workingdirectory="/">
      
      <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
      <javaproperty name="apple.awt.brushMetal"       value="true"/>
      <javaproperty name="apple.awt.showGrowBox"      value="true"/>
      
      <documenttype name=       "Dred text document"
                    extensions= "*" 
                    ostypes=    "****" 
                    role=       "Editor"/>
          
    </jarbundler>
    
  </target>
  
  <target name="newapp" depends="jar" description="Build the application using Oracle application bundler">

    <taskdef name=      "bundleapp"
             classpath= "${appbundler.jar}" 
             classname= "com.oracle.appbundler.AppBundlerTask"/>

    <bundleapp  outputdirectory= "${basedir}" 
                name=           "AppleDred"
                displayname=    "AppleDred"
                mainclassname=  "${mainclass}"
                identifier=     "org.sufrin.dred.AppleDred"
                icon=           "${ant.project.name}.icns"
                copyright=       "${ant.project.name} ${builddate} ${copyright}"
                shortversion=   "${version}"
                >
      
      <classpath file="build/${ant.project.name}.jar"/>


      <!-- For some godwaful reason this packages the entire runtime (>100mb) -->
      <!-- <runtime dir="/Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/" /> -->
      
      <option value="-Dapple.laf.useScreenMenuBar=true"/>
      <option value="-Dapple.awt.brushMetal=true"/>
      <option value="-Dapple.awt.showGrowBox=true"/>
      <!-- -->
                
    </bundleapp>
    
  </target>

  <target name="prepare">
    <mkdir dir="classes"/>
    <mkdir dir="build"/>
    <copy overwrite="true" file="../BUILD/Dred.jar" tofile="build/${ant.project.name}.jar"/>
  </target>
  
  <target name="clean" description="Clean up anything we can rebuild">
    <delete dir="${ant.project.name}.app" quiet="true"/>
    <delete file="${ant.project.name}.dmg" quiet="true"/>
    <delete dir="build"                   quiet="true"/> 
    <delete dir="classes"                 quiet="true"/> 
  </target>

</project>


<!--
Notes written during an attempt to regularise the distribution(s)
of OS/X variants of the Jape proof tool (late October 2014)

I have been sitting at an OSX 10.7 machine (agonistes) with an OSX
10.9 machine (mimi) to my left. Both machines have all java
installations

mimi 10.9
> 616 $ /usr/libexec/java_home -V
> Matching Java Virtual Machines (4):
>     1.8.0_20, x86_64: "Java SE 8"     /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home
>     1.7.0_67, x86_64: "Java SE 7"     /Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk/Contents/Home
>     1.6.0_65-b14-462, x86_64: "Java SE 6"     /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
>     1.6.0_65-b14-462, i386:   "Java SE 6"     /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

agonistes 10.7
> 523 $ /usr/libexec/java_home -V
> Matching Java Virtual Machines (4):
>     1.8.0_20, x86_64: "Java SE 8"     /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home
>     1.7.0_17, x86_64: "Java SE 7"     /Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home
>     1.6.0_65-b14-466.1, x86_64:       "Java SE 6"     /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
>     1.6.0_65-b14-466.1, i386: "Java SE 6"     /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

What I have learned is

1. The command-line tools like java and javac will respect the JAVA_HOME
environment variable, and you can use, eg

export JAVA_HOME="`/usr/libexec/java_home -v '1.7*'`"

to give you a suitable compilation environment.

2. Standard double-clickable application bundles don't use JDKs
installed under /Library/Java (or anywhere else). Old-style .app
bundles, bundled with the jarbundler and therefore using using Apple's
JavaApplicationStub, will use Apple Java 6 from
/System/Library/Frameworks.

3. New-style .app bundles built with Oracle's AppBundler (without a
bundled JRE) will (on 10.7+)use the "public" JRE in

/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home

The path is hard-coded in the stub code and can't be changed; so you
can't have two different public JREs installed simultaneously.

However, you CAN (at the expense of vastly bloating the .app bundle ==
in the case of the Dred editor it went from <450kb to >100mb) bundle an
appropriate JRE in the app bundle, and (at least) 10.7 (probably 10.8)
and 10.9 will use the one that's bundled.

To quote Tony Hoare: ''Fuck me! If it's going to be THAT complicated
then I'd rather be doing theory.'' (that's what he was thinking == he
didn't quite use the same phrasing)

Still: I think I now know what to do.

1. Make a single small app bundle with java1.6, and tell people they can
use that if they ONLY have java1.6 installed (an increasingly small
proportion of Macistas are in this state as they move up the OS/X versions)

2. Make a single small app bundle with java 1.8, and tell people they
have to install java 1.8 from Oracle. This for citizens with 10.7+ who
have the capacity to install Java without handholding.

3. Make a large app bundle with java 1.8 JRE bundled. This for citizens
without the capacity to install Java 1.8 without handholding.

2 and 3 are, at least, future-proof.

The appleeawt issue is orthogonal, but I have made a jar with JUST that
API in it that can be used to compile the apple variant of the program I
discovered all this with (my Dred editor) using Java 1.8 on OS/X 10.9. I
have no reason to suppose that I cannot do the same with Jape; but I'm
not inclined to do it tonight.

B.

-->



























