#!/usr/bin/env python2.3
#

"""
        $Id: javatree,v 1.1 2005/01/04 15:00:04 sufrin Exp $
        
        Looks at a list of (java) files and for those of them
        with package declarations ensures that a suitably-named
        package directory exists (in the current directory)
        and that there is a (symbolic) link to the file in
        its package directory. Files without package
        declarations are linked to the current directory.

        This makes it possible to keep source and RCS/CVS materials
        in a single directory whilst still meeting the (sensible)
        java requirements that package-element sources be in
        appropriate directories.

"""

import sys, os, os.path

def prefixes(array):
    return [array[0:i] for i in xrange(1, len(array)+1)]

def mkDir(path):
    try: 
     os.makedirs(path)
     print "mkdir %s"%path
    except OSError, e:
     if e.errno is not 17:      # path already exists 
        print e, path
     else:
        incDirs()
     
def linkPaths(src, dst):
    srcpath = src.split("/")
    dstpath = dst.split("/")
    if srcpath[0]=='':
       linkpath=["/"]+srcpath[1:]
    else:
       while srcpath[0]=='.': 
             srcpath=srcpath[1:]
       n = len(dstpath) - 1
       linkpath = (n*[".."]) + srcpath
    try:
     src = "/".join(linkpath)
     dst = "/".join(dstpath)
     os.symlink(src, dst)
     print "ln -s %-20s %s"%(src,dst)
    except OSError, e:
     if e.errno is not 17:      # link already exists
        print e, dst
     else:
        incLinks()

def processFile(file):
    if os.path.isdir(file):
       processDir(file)
       return
    name, ext = os.path.splitext(file)
    if ext == ".java":
       chan  = open(file, "r")
       line  = chan.readline()
       search = 1
       while line and search:
           p = line.find("package")
           if (p>=0):
              line = line.replace("\n", "")
              while line[-1]==' ': line = line[:-1]
              while line[0]==' ' or line[0]=='\t': line = line[1:]
              p = line.find("package")
           if p==0 and line[-1]==';':
              td = line[p+8:-1].replace(".", "/").replace(";", "").replace(" ", "").replace("\t", "")
              search = 0
           else:
              line=chan.readline()
       chan.close()
       if search: 
          td = ''
       if td: 
          mkDir(td)
       srcdir, filename = os.path.split(file)
       linkPaths(file, os.path.join(td, filename))

def processDir(dirname):
    for file in os.listdir(dirname):
        processFile(os.path.join(dirname, file));

dirs=links=0
def incDirs():
    global dirs
    dirs=dirs+1

def incLinks():
    global links
    links=links+1

if len(sys.argv)>1:
   for arg in sys.argv[1:]: processFile(arg)
   if dirs:  print "javatree", sys.argv[1:], "Some Directories already existed."
   if links: print "javatree", sys.argv[1:], "Some Links already existed."
else:
   print("""Usage: javatree [filename | dirname]* 
       Sets up java package directories with symbolic links to source files.
       Symbolic links are placed (according to package information) 
       at an appropriate place in the target root directory tree.
       Convention is to keep all source files in the same directory, though
       it's possible to have nested source directories as well.
       Should be run from the target root directory.
   """)
      
    












